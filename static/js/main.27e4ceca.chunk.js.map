{"version":3,"sources":["components/atoms/Button/constants.js","components/atoms/Button/index.js","components/atoms/Switch/index.js","components/atoms/Backdrop/constants.js","components/atoms/Backdrop/index.js","components/molecules/Menu/index.js","components/molecules/AppControls/index.js","components/organisms/TopBar/index.js","components/organisms/AppDrawer/index.js","components/atoms/Bar/index.js","components/organisms/SortChart/index.js","components/molecules/VisualizerControls/index.js","components/molecules/ProgressBar/index.js","components/molecules/ColorKey/index.js","components/molecules/SortInfo/index.js","components/organisms/SortVisualizer/index.js","components/molecules/Footer/index.js","algorithms/helpers.js","algorithms/BubbleSort.js","algorithms/SelectionSort.js","algorithms/InsertionSort.js","algorithms/MergeSort.js","algorithms/QuickSort.js","algorithms/QuickSort3.js","algorithms/HeapSort.js","algorithms/ShellSort.js","App.js","serviceWorker.js","index.js"],"names":["CSS_CLASSES","renderIcon","icon","iconClass","ICON","className","Button","raised","unelevated","outlined","dense","notCased","disabled","href","onClick","children","classNames","rootClass","ClassMappings","userClassName","Object","keys","forEach","buildClassNames","Switch","state","checked","toggleChecked","setState","prevState","handleClick","e","preventDefault","props","onSwitch","this","prevProps","htmlFor","label","name","id","type","Component","Backdrop","show","opaque","dark","undefined","MenuList","open","items","onSelect","map","item","i","key","evt","Menu","close","toggle","selected","placeholder","noDropIcon","AngleUp","AngleDown","AppControls","algorithm","onAlgorithmChange","onGenerateRandomArray","arraySize","onArraySizeChange","onToggleDarkMode","darkMode","String","TopBar","drawerOpen","toggleDrawer","Close","Hamburger","AppDrawer","closeDrawer","Bar","width","height","val","stateA","stateB","stateC","stateD","sorted","style","BarStyle","SortChart","numbers","maxNum","groupA","groupB","groupC","groupD","sortedIndices","num","length","includes","margin","marginRight","getListOfBars","isDisabled","action","VisualizerControls","onPlay","onPause","onBackward","onForward","onRepeat","onAdjustSpeed","playing","playDisabled","pauseDisabled","backwardDisabled","forwardDisabled","repeatDisabled","playbackSpeed","Repeat","Backward","Pause","Play","Forward","ProgressBar","ColorKey","keySorted","keyA","keyB","keyC","keyD","SortInfo","title","description","worstCase","avgCase","bestCase","space","SortVisualizer","trace","traceStep","originalArray","array","timeoutIds","_reset","clearTimeouts","timeoutId","clearTimeout","_changeVisualState","visualState","run","timer","setTimeout","push","pause","continue","slice","stepForward","step","stepBackward","repeat","comparing","compared","adjustPlaybackSpeed","speed","Number","split","Math","max","bind","colorKey","desc","Footer","target","rel","newTrace","addToTrace","lastSorted","swap","j","tmp","createRange","start","end","Array","elem","createKey","BubbleSortKey","BubbleSortDesc","BubbleSort","nums","SelectionSortKey","SelectionSortDesc","SelectionSort","minIndex","InsertionSortKey","InsertionSortDesc","InsertionSort","value","hole","MergeSortKey","MergeSortDesc","MergeSort","recursiveMergeSort","original","midPoint","floor","mid","left","right","k","merge","QuickSortKey","QuickSortDesc","QuickSort","recursiveQuickSort","pivot","random","choosePivot","partition","QuickSort3Key","QuickSort3Desc","QuickSort3","recursiveQuickSort3","pivot_elements","pivotStart","pivotEnd","HeapSortKey","HeapSortDesc","HeapSort","maxHeapify","heapsize","leftChild","rightChild","largest","BuildMaxHeap","heapSort","ShellSortKey","ShellSortDesc","ShellSort","gap","App","appDrawerOpen","ALGORITHM","ALGORITHM_KEY","ALGORITHM_DESC","generateRandomArray","fill","createTrace","handleAlgorithmChange","handleArraySizeChange","size","sort","toggleDarkMode","toggleAppDrawer","theme","controls","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.27e4ceca.chunk.js","sourcesContent":["export const CSS_CLASSES = {\r\n  ROOT: 'Button',\r\n  ICON: 'Button__Icon',\r\n  LABEL: 'Button__Label',\r\n  DENSE: 'Button_dense',\r\n  RAISED: 'Button_raised',\r\n  OUTLINED: 'Button_outlined',\r\n  UNELEVATED: 'Button_unelevated',\r\n  UPPERCASE: 'Button_uppercase'\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './style.css';\r\nimport { CSS_CLASSES } from './constants';\r\n\r\nfunction buildClassNames(rootClass, ClassMappings, userClassName) {\r\n  let classNames = `${rootClass}`;\r\n  Object.keys(ClassMappings).forEach((className) => {\r\n    if (ClassMappings[className]) {\r\n      classNames += ` ${className}`;\r\n    }\r\n  });\r\n  classNames += ` ${userClassName}`;\r\n  return classNames;\r\n}\r\n\r\nfunction renderIcon(icon, iconClass) {\r\n  const ICON = icon;\r\n  return <ICON className={`${CSS_CLASSES.ICON} ${iconClass}`} />;\r\n}\r\n\r\nconst Button = ({\r\n  className,\r\n  raised,\r\n  unelevated,\r\n  outlined,\r\n  dense,\r\n  notCased,\r\n  disabled,\r\n  icon,\r\n  iconClass,\r\n  href,\r\n  onClick,\r\n  children\r\n}) => {\r\n  const classNames = buildClassNames(\r\n    CSS_CLASSES.ROOT,\r\n    {\r\n      [CSS_CLASSES.DENSE]: dense,\r\n      [CSS_CLASSES.RAISED]: raised,\r\n      [CSS_CLASSES.OUTLINED]: outlined,\r\n      [CSS_CLASSES.UNELEVATED]: unelevated,\r\n      [CSS_CLASSES.UPPERCASE]: !notCased\r\n    },\r\n    className\r\n  );\r\n\r\n  if (href) {\r\n    return (\r\n      <a href={href} className={classNames} disabled={disabled}>\r\n        {icon ? renderIcon(icon, iconClass) : null}\r\n        <span className=\"Button__Label\">{children}</span>\r\n      </a>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <button\r\n      onClick={onClick}\r\n      className={classNames}\r\n      disabled={disabled}\r\n    >\r\n      {icon ? renderIcon(icon, iconClass) : null}\r\n      <span className=\"Button__Label\">{children}</span>\r\n    </button>\r\n  );\r\n};\r\n\r\nButton.propTypes = {\r\n  className: PropTypes.string,\r\n  raised: PropTypes.bool,\r\n  unelevated: PropTypes.bool,\r\n  outlined: PropTypes.bool,\r\n  dense: PropTypes.bool,\r\n  notCased: PropTypes.bool,\r\n  disabled: PropTypes.bool,\r\n  icon: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\r\n  href: PropTypes.string,\r\n  onClick: PropTypes.func,\r\n  children: PropTypes.oneOfType([PropTypes.func, PropTypes.node])\r\n};\r\n\r\nexport default Button;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './style.css';\r\n\r\nclass Switch extends Component {\r\n  state = {\r\n    checked: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (this.props.checked) {\r\n      this.setState({ checked: this.props.checked });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.checked !== this.props.checked) {\r\n      this.setState({ checked: this.props.checked });\r\n    }\r\n  }\r\n\r\n  toggleChecked = () => {\r\n    this.setState((prevState) => ({ checked: !prevState.checked }));\r\n  };\r\n\r\n  handleClick = (e) => {\r\n    e.preventDefault();\r\n    this.toggleChecked();\r\n    this.props.onSwitch();\r\n  };\r\n\r\n  render() {\r\n    let Switch = `Switch`;\r\n    if (this.state.checked) Switch += ` Switch_checked`;\r\n    if (this.props.className) Switch += ` ${this.props.className}`;\r\n    return (\r\n      <div className={Switch}>\r\n        <label className=\"Switch__Label\" htmlFor=\"Switch__Thumb\">\r\n          {this.props.label}\r\n        </label>\r\n\r\n        <div className=\"Switch__Button\">\r\n          <div className=\"Switch__Track\"></div>\r\n          <input\r\n            className=\"Switch__Thumb\"\r\n            onClick={this.handleClick}\r\n            name=\"Switch__Thumb\"\r\n            id=\"Switch__Thumb\"\r\n            type=\"button\"\r\n          ></input>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nSwitch.propTypes = {\r\n  onSwitch: PropTypes.func,\r\n  className: PropTypes.string\r\n};\r\n\r\nexport default Switch;\r\n","export const CSS_CLASSES = {\r\n  ROOT: 'Backdrop',\r\n  OPAQUE: 'Backdrop_opaque',\r\n  DARK: 'Backdrop_dark',\r\n  CLICKABLE: 'Backdrop_clickable'\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './style.css';\r\nimport { CSS_CLASSES } from './constants';\r\n\r\nfunction buildClassNames(rootClass, ClassMappings, userClassName) {\r\n  let classNames = `${rootClass}`;\r\n  Object.keys(ClassMappings).forEach((className) => {\r\n    if (ClassMappings[className]) {\r\n      classNames += ` ${className}`;\r\n    }\r\n  });\r\n  classNames += ` ${userClassName}`;\r\n  return classNames;\r\n}\r\n\r\nconst Backdrop = ({ show, opaque, dark, className, onClick }) => {\r\n  const classNames = buildClassNames(\r\n    CSS_CLASSES.ROOT,\r\n    {\r\n      [CSS_CLASSES.OPAQUE]: opaque,\r\n      [CSS_CLASSES.DARK]: dark,\r\n      [CSS_CLASSES.CLICKABLE]: onClick !== undefined\r\n    },\r\n    className\r\n  );\r\n\r\n  return show ? <div className={classNames} onClick={onClick} /> : null;\r\n};\r\n\r\nBackdrop.propTypes = {\r\n  show: PropTypes.bool,\r\n  opaque: PropTypes.bool,\r\n  dark: PropTypes.bool,\r\n  className: PropTypes.string,\r\n  onClick: PropTypes.func\r\n};\r\nexport default Backdrop;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './style.css';\r\n\r\n// Sub components\r\nimport Backdrop from '../../atoms/Backdrop';\r\nimport {\r\n  MdExpandMore as AngleDown,\r\n  MdExpandLess as AngleUp\r\n} from 'react-icons/md';\r\nimport Button from '../../atoms/Button';\r\n\r\nconst MenuList = ({ open, items, onSelect }) => {\r\n  return open ? (\r\n    <ul className=\"Menu__List\">\r\n      {items.map((item, i) => (\r\n        <li\r\n          key={`${item}_${i}`}\r\n          onClick={(evt) => {\r\n            onSelect(evt, item);\r\n          }}\r\n          className=\"Menu__Item\"\r\n        >\r\n          {item}\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  ) : null;\r\n};\r\n\r\nclass Menu extends Component {\r\n  state = {\r\n    open: this.props.open || false\r\n  };\r\n\r\n  close = (evt) => {\r\n    evt.preventDefault();\r\n    this.setState({ open: false });\r\n  };\r\n\r\n  toggle = (evt) => {\r\n    evt.preventDefault();\r\n    this.setState((prevState) => ({ open: !prevState.open }));\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      className,\r\n      selected,\r\n      onSelect,\r\n      placeholder,\r\n      items,\r\n      noDropIcon\r\n    } = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <Backdrop show={this.state.open} onClick={this.close} />\r\n        <div className={`Menu ${className}`}>\r\n          <header className=\"Menu__Header\">\r\n            {noDropIcon ? (\r\n              <Button\r\n                onClick={this.toggle}\r\n                notCased\r\n                className={selected ? null : 'Menu__Placeholder'}\r\n              >\r\n                {selected ? selected : placeholder}\r\n              </Button>\r\n            ) : (\r\n              <div\r\n                className={\r\n                  selected ? 'Menu__SelectedItem' : 'Menu__Placeholder'\r\n                }\r\n              >\r\n                {selected ? selected : placeholder}\r\n              </div>\r\n            )}\r\n            {noDropIcon ? null : (\r\n              <Button\r\n                icon={this.state.open ? AngleUp : AngleDown}\r\n                onClick={this.toggle}\r\n              />\r\n            )}\r\n          </header>\r\n          <MenuList\r\n            open={this.state.open}\r\n            items={items}\r\n            onSelect={(evt, item) => {\r\n              onSelect(item);\r\n              this.close(evt);\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nMenu.propTypes = {\r\n  className: PropTypes.string,\r\n  selected: PropTypes.string,\r\n  onSelect: PropTypes.func,\r\n  placeholder: PropTypes.string,\r\n  items: PropTypes.arrayOf(PropTypes.string),\r\n  noDropIcon: PropTypes.bool\r\n};\r\n\r\nexport default Menu;\r\n","import React, { Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './style.css';\r\n\r\nimport Button from '../../atoms/Button';\r\nimport Switch from '../../atoms/Switch';\r\nimport Menu from '../../molecules/Menu';\r\n\r\nconst AppControls = ({\r\n  algorithm,\r\n  onAlgorithmChange,\r\n  onGenerateRandomArray,\r\n  arraySize,\r\n  onArraySizeChange,\r\n  onToggleDarkMode,\r\n  darkMode\r\n}) => {\r\n  return (\r\n    <Fragment>\r\n      <Menu\r\n        placeholder=\"Sort Algorithm\"\r\n        items={[\r\n          'Bubble Sort',\r\n          'Selection Sort',\r\n          'Insertion Sort',\r\n          'Merge Sort',\r\n          'Quick Sort',\r\n          'Quick Sort 3',\r\n          'Heap Sort',\r\n          'Shell Sort'\r\n        ]}\r\n        selected={algorithm}\r\n        onSelect={onAlgorithmChange}\r\n      />\r\n\r\n      <div className=\"AppControls__Size\">\r\n        <span>Size</span>\r\n        <Menu\r\n          placeholder=\"Array Size\"\r\n          items={['5', '10', '25', '50', '75', '100']}\r\n          selected={String(arraySize)}\r\n          onSelect={onArraySizeChange}\r\n        />\r\n      </div>\r\n\r\n      <Button onClick={onGenerateRandomArray}>Randomize</Button>\r\n\r\n      <Switch\r\n        label=\"Dark Mode\"\r\n        onSwitch={onToggleDarkMode}\r\n        checked={darkMode}\r\n      />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nAppControls.propTypes = {\r\n  algorithm: PropTypes.string,\r\n  onAlgorithmChange: PropTypes.func.isRequired,\r\n  onGenerateRandomArray: PropTypes.func.isRequired,\r\n  arraySize: PropTypes.number,\r\n  onArraySizeChange: PropTypes.func.isRequired,\r\n  onToggleDarkMode: PropTypes.func.isRequired,\r\n  darkMode: PropTypes.bool\r\n};\r\n\r\nexport default AppControls;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './style.css';\r\n\r\nimport Button from '../../atoms/Button';\r\nimport { MdMenu as Hamburger, MdClose as Close } from 'react-icons/md';\r\n\r\nconst TopBar = ({ drawerOpen, toggleDrawer, children }) => {\r\n  return (\r\n    <header className=\"TopBar\">\r\n      <div className=\"TopBar__Row\">\r\n        <section className=\"TopBar__Section\">\r\n          <Button\r\n            icon={drawerOpen ? Close : Hamburger}\r\n            className=\"TopBar__MenuButton\"\r\n            iconClass=\"TopBar__Icon\"\r\n            onClick={toggleDrawer}\r\n          />\r\n          <span className=\"TopBar__Title\">Sort Visualizer</span>\r\n        </section>\r\n        <section className=\"TopBar__Section TopBar__Section_align_end\">\r\n          {children}\r\n        </section>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default TopBar;\r\n","import React, { Fragment } from 'react';\r\nimport './style.css';\r\n\r\nimport Backdrop from '../../atoms/Backdrop';\r\n\r\nconst AppDrawer = ({ open, children, closeDrawer }) => {\r\n  let className = 'AppDrawer';\r\n  className += open ? ` AppDrawer_open` : ` AppDrawer_closed`;\r\n  return (\r\n    <Fragment>\r\n      <div className={className}>\r\n        <div className=\"AppDrawer__Content\">{children}</div>\r\n      </div>\r\n      <Backdrop show={open} onClick={closeDrawer} />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default AppDrawer;\r\n","import React from 'react';\r\nimport './style.css';\r\n\r\nconst Bar = ({\r\n  width,\r\n  height,\r\n  val,\r\n  stateA,\r\n  stateB,\r\n  stateC,\r\n  stateD,\r\n  sorted,\r\n  style\r\n}) => {\r\n  let classNames = 'Bar';\r\n  if (sorted) classNames += ' Bar_sorted';\r\n  if (stateD) classNames += ' Bar_stateD';\r\n  else if (stateC) classNames += ' Bar_stateC';\r\n  else if (stateB) classNames += ' Bar_stateB';\r\n  else if (stateA) classNames += ' Bar_stateA';\r\n\r\n  let BarStyle = { ...style, width: `${width}%`, height: `${height}%` };\r\n  if (stateA || stateB || stateC || stateD) {\r\n    BarStyle['marginRight'] = `${0.3 * width}%`;\r\n    BarStyle['marginLeft'] = `${0.3 * width}% `;\r\n  }\r\n\r\n  return (\r\n    <div style={BarStyle} className={classNames}>\r\n      <span className=\"Bar__Text\">{val}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Bar;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './style.css';\r\n\r\nimport Bar from '../../atoms/Bar';\r\n\r\nconst getListOfBars = (\r\n  numbers,\r\n  maxNum,\r\n  groupA,\r\n  groupB,\r\n  groupC,\r\n  groupD,\r\n  sortedIndices\r\n) => {\r\n  return numbers.map((num, i) => {\r\n    let width = 100 / numbers.length;\r\n    let height = (num / maxNum) * 100;\r\n    let stateA = groupA.includes(i);\r\n    let stateB = groupB.includes(i);\r\n    let stateC = groupC.includes(i);\r\n    let stateD = groupD.includes(i);\r\n    let sorted = sortedIndices.includes(i);\r\n\r\n    let margin =\r\n      i === numbers.length ? '0' : width > 3 ? '0.5rem' : '0.125rem';\r\n    return (\r\n      <Bar\r\n        key={`${i}_${num}`}\r\n        width={width}\r\n        height={height}\r\n        val={width > 4 ? num : null}\r\n        stateA={stateA}\r\n        stateB={stateB}\r\n        stateC={stateC}\r\n        stateD={stateD}\r\n        sorted={sorted}\r\n        style={{ marginRight: `${margin}` }}\r\n      />\r\n    );\r\n  });\r\n};\r\n\r\nconst SortChart = ({\r\n  numbers,\r\n  maxNum,\r\n  groupA,\r\n  groupB,\r\n  groupC,\r\n  groupD,\r\n  sortedIndices\r\n}) => {\r\n  return (\r\n    <div className=\"SortChart\">\r\n      {getListOfBars(\r\n        numbers,\r\n        maxNum,\r\n        groupA,\r\n        groupB,\r\n        groupC,\r\n        groupD,\r\n        sortedIndices\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nSortChart.propTypes = {\r\n  numbers: PropTypes.arrayOf(PropTypes.number),\r\n  maxNum: PropTypes.number,\r\n  groupA: PropTypes.arrayOf(PropTypes.number),\r\n  groupB: PropTypes.arrayOf(PropTypes.number),\r\n  groupC: PropTypes.arrayOf(PropTypes.number),\r\n  groupD: PropTypes.arrayOf(PropTypes.number),\r\n  sortedIndices: PropTypes.arrayOf(PropTypes.number)\r\n};\r\n\r\nexport default SortChart;\r\n","import React from 'react';\r\nimport './style.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Button from '../../atoms/Button';\r\nimport {\r\n  MdPlayArrow as Play,\r\n  MdPause as Pause,\r\n  MdSkipNext as Forward,\r\n  MdSkipPrevious as Backward,\r\n  MdRepeat as Repeat\r\n} from 'react-icons/md';\r\nimport Menu from '../Menu';\r\n\r\n// Helper function\r\nfunction isDisabled(action, disabled = false) {\r\n  return action === undefined || disabled;\r\n}\r\n\r\nconst VisualizerControls = ({\r\n  // Actions\r\n  onPlay,\r\n  onPause,\r\n  onBackward,\r\n  onForward,\r\n  onRepeat,\r\n  onAdjustSpeed,\r\n\r\n  // States\r\n  playing,\r\n  playDisabled,\r\n  pauseDisabled,\r\n  backwardDisabled,\r\n  forwardDisabled,\r\n  repeatDisabled,\r\n  playbackSpeed\r\n}) => {\r\n  return (\r\n    <div className=\"VisualizerControls\">\r\n      {/* Repeat */}\r\n      <Button\r\n        icon={Repeat}\r\n        onClick={onRepeat}\r\n        disabled={isDisabled(onRepeat, repeatDisabled)}\r\n        className=\"VisualizerControls__Button\"\r\n      />\r\n\r\n      {/* Backward Button  */}\r\n      <Button\r\n        icon={Backward}\r\n        onClick={onBackward}\r\n        disabled={isDisabled(onBackward, backwardDisabled)}\r\n        iconClass=\"VisualizerControls__Icon\"\r\n        className=\"VisualizerControls__Button\"\r\n      />\r\n\r\n      {/* Play or Pause button - context dependent */}\r\n      <Button\r\n        icon={playing ? Pause : Play}\r\n        onClick={playing ? onPause : onPlay}\r\n        disabled={\r\n          playing\r\n            ? isDisabled(onPause, pauseDisabled)\r\n            : isDisabled(onPlay, playDisabled)\r\n        }\r\n        raised\r\n        iconClass=\"VisualizerControls__Icon\"\r\n        className=\"VisualizerControls__CenterButton\"\r\n      />\r\n\r\n      {/* Forward Button  */}\r\n      <Button\r\n        icon={Forward}\r\n        onClick={onForward}\r\n        disabled={isDisabled(onForward, forwardDisabled)}\r\n        iconClass=\"VisualizerControls__Icon\"\r\n        className=\"VisualizerControls__Button\"\r\n      />\r\n\r\n      {/* Playback Speed */}\r\n      <Menu\r\n        items={['0.25x', '0.5x', '1x', '2x', '4x']}\r\n        placeholder=\"Speed\"\r\n        selected={`${playbackSpeed}x`}\r\n        onSelect={onAdjustSpeed}\r\n        noDropIcon\r\n        className=\"VisualizerControls__SpeedButton\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nVisualizerControls.propTypes = {\r\n  onPlay: PropTypes.func,\r\n  onPause: PropTypes.func,\r\n  onBackward: PropTypes.func,\r\n  onForward: PropTypes.func,\r\n  onRepeat: PropTypes.func,\r\n  onAdjustSpeed: PropTypes.func,\r\n\r\n  playing: PropTypes.bool,\r\n  playDisabled: PropTypes.bool,\r\n  pauseDisabled: PropTypes.bool,\r\n  backwardDisabled: PropTypes.bool,\r\n  forwardDisabled: PropTypes.bool,\r\n  repeatDisabled: PropTypes.bool,\r\n  playbackSpeed: PropTypes.number\r\n};\r\n\r\nexport default VisualizerControls;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './style.css';\r\n\r\nconst ProgressBar = ({ width }) => (\r\n  <div className=\"ProgressBar\">\r\n    <div\r\n      className=\"ProgressBar__Active\"\r\n      style={{\r\n        width: `${width}%`\r\n      }}\r\n    ></div>\r\n  </div>\r\n);\r\n\r\nProgressBar.propTypes = {\r\n  width: PropTypes.number.isRequired\r\n};\r\n\r\nexport default ProgressBar;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './style.css';\r\n\r\nconst ColorKey = ({ groupA, groupB, groupC, groupD }) => {\r\n  const keySorted =\r\n    groupA || groupB || groupC || groupD ? (\r\n      <div className=\"ColorKey__Item\">\r\n        <div className=\"ColorKey__Box ColorKey__Sorted\"></div>\r\n        <span>Sorted</span>\r\n      </div>\r\n    ) : (\r\n      <div className=\"ColorKey__Item\">\r\n        <div className=\"ColorKey__Box ColorKey__Unsorted\"></div>\r\n        <span>Unsorted</span>\r\n      </div>\r\n    );\r\n\r\n  const keyA = groupA ? (\r\n    <div className=\"ColorKey__Item\">\r\n      <div className=\"ColorKey__Box ColorKey__GroupA\"></div>\r\n      <span>{groupA}</span>\r\n    </div>\r\n  ) : null;\r\n\r\n  const keyB = groupB ? (\r\n    <div className=\"ColorKey__Item\">\r\n      <div className=\"ColorKey__Box ColorKey__GroupB\"></div>\r\n      <span>{groupB}</span>\r\n    </div>\r\n  ) : null;\r\n\r\n  const keyC = groupC ? (\r\n    <div className=\"ColorKey__Item\">\r\n      <div className=\"ColorKey__Box ColorKey__GroupC\"></div>\r\n      <span>{groupC}</span>\r\n    </div>\r\n  ) : null;\r\n\r\n  const keyD = groupD ? (\r\n    <div className=\"ColorKey__Item\">\r\n      <div className=\"ColorKey__Box ColorKey__GroupD\"></div>\r\n      <span>{groupD}</span>\r\n    </div>\r\n  ) : null;\r\n\r\n  return (\r\n    <div className=\"ColorKey\">\r\n      {keySorted}\r\n      {keyA}\r\n      {keyB}\r\n      {keyC}\r\n      {keyD}\r\n    </div>\r\n  );\r\n};\r\n\r\nColorKey.propTypes = {\r\n  groupA: PropTypes.string,\r\n  groupB: PropTypes.string,\r\n  groupC: PropTypes.string,\r\n  groupD: PropTypes.string\r\n};\r\n\r\nexport default ColorKey;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './style.css';\r\n\r\nconst SortInfo = ({\r\n  title,\r\n  description,\r\n  worstCase,\r\n  avgCase,\r\n  bestCase,\r\n  space\r\n}) => {\r\n  return (\r\n    <div className=\"SortInfo\">\r\n      <hr />\r\n      <h1>{title ? title : 'Select Algorithm'}</h1>\r\n\r\n      <div className=\"SortInfo__Body\">\r\n        <article className=\"SortInfo__Article\">\r\n          {description ? (\r\n            description\r\n          ) : (\r\n            <p>\r\n              You must select an algorithm before you can visualize it's\r\n              execution on an array of numbers.\r\n            </p>\r\n          )}\r\n        </article>\r\n\r\n        <aside className=\"SortInfo__Aside\">\r\n          <h3>Performance</h3>\r\n          <table>\r\n            <tbody>\r\n              <tr>\r\n                <td>Worst-case time complexity</td>\r\n                <td>\r\n                  <code>{worstCase}</code>\r\n                </td>\r\n              </tr>\r\n\r\n              <tr>\r\n                <td>Average time complexity</td>\r\n                <td>\r\n                  <code>{avgCase}</code>\r\n                </td>\r\n              </tr>\r\n\r\n              <tr>\r\n                <td>Best-case time complexity</td>\r\n                <td>\r\n                  <code>{bestCase}</code>\r\n                </td>\r\n              </tr>\r\n\r\n              <tr>\r\n                <td>Worst-case space complexity</td>\r\n                <td>\r\n                  <code>{space}</code>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </aside>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nSortInfo.propTypes = {\r\n  title: PropTypes.string,\r\n  description: PropTypes.object,\r\n  worstCase: PropTypes.object,\r\n  avgCase: PropTypes.object,\r\n  bestCase: PropTypes.object,\r\n  space: PropTypes.object\r\n};\r\n\r\nexport default SortInfo;\r\n","import React, { Component } from 'react';\r\nimport './style.css';\r\n\r\n// Sub components\r\nimport SortChart from '../SortChart';\r\nimport VisualizerControls from '../../molecules/VisualizerControls';\r\nimport ProgressBar from '../../molecules/ProgressBar';\r\nimport ColorKey from '../../molecules/ColorKey';\r\nimport SortInfo from '../../molecules/SortInfo';\r\n\r\nclass SortVisualizer extends Component {\r\n  state = {\r\n    trace: [],\r\n    traceStep: -1,\r\n\r\n    originalArray: [],\r\n    array: [],\r\n    groupA: [],\r\n    groupB: [],\r\n    groupC: [],\r\n    groupD: [],\r\n    sortedIndices: [],\r\n\r\n    timeoutIds: [],\r\n    playbackSpeed: 1\r\n  };\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.array !== this.props.array) {\r\n      this._reset(this.props.array);\r\n    }\r\n    if (prevProps.trace !== this.props.trace) {\r\n      this.clearTimeouts();\r\n      this.setState({ trace: this.props.trace });\r\n    }\r\n  }\r\n\r\n  // Actions\r\n\r\n  _reset = (array) => {\r\n    this.setState({\r\n      array,\r\n      trace: [],\r\n      traceStep: -1,\r\n      groupA: [],\r\n      groupB: [],\r\n      groupC: [],\r\n      groupD: [],\r\n      sortedIndices: [],\r\n      originalArray: [...array]\r\n    });\r\n  };\r\n\r\n  clearTimeouts = () => {\r\n    this.state.timeoutIds.forEach((timeoutId) =>\r\n      clearTimeout(timeoutId)\r\n    );\r\n    this.setState({ timeoutIds: [] });\r\n  };\r\n\r\n  _changeVisualState = (visualState) => {\r\n    this.setState({\r\n      array: visualState.array,\r\n      groupA: visualState.groupA,\r\n      groupB: visualState.groupB,\r\n      groupC: visualState.groupC,\r\n      groupD: visualState.groupD,\r\n      sortedIndices: visualState.sortedIndices\r\n    });\r\n  };\r\n\r\n  run = (trace) => {\r\n    const timeoutIds = [];\r\n    const timer = 250 / this.state.playbackSpeed;\r\n\r\n    // Set a timeout for each item in the trace\r\n    trace.forEach((item, i) => {\r\n      let timeoutId = setTimeout(\r\n        (item) => {\r\n          this.setState(\r\n            (prevState) => ({\r\n              traceStep: prevState.traceStep + 1\r\n            }),\r\n            this._changeVisualState(item)\r\n          );\r\n        },\r\n        i * timer,\r\n        item\r\n      );\r\n\r\n      timeoutIds.push(timeoutId);\r\n    });\r\n\r\n    // Clear timeouts upon completion\r\n    let timeoutId = setTimeout(\r\n      this.clearTimeouts,\r\n      trace.length * timer\r\n    );\r\n    timeoutIds.push(timeoutId);\r\n\r\n    this.setState({ timeoutIds });\r\n  };\r\n\r\n  pause = () => {\r\n    this.clearTimeouts();\r\n  };\r\n\r\n  continue = () => {\r\n    const trace = this.state.trace.slice(this.state.traceStep);\r\n    this.run(trace);\r\n  };\r\n\r\n  stepForward = () => {\r\n    const trace = this.state.trace;\r\n    const step = this.state.traceStep;\r\n    if (step < trace.length - 1) {\r\n      const item = trace[step + 1];\r\n      this.setState(\r\n        { traceStep: step + 1 },\r\n        this._changeVisualState(item)\r\n      );\r\n    }\r\n  };\r\n\r\n  stepBackward = () => {\r\n    const trace = this.state.trace;\r\n    const step = this.state.traceStep;\r\n    if (step > 0) {\r\n      const item = trace[step - 1];\r\n      this.setState(\r\n        { traceStep: step - 1 },\r\n        this._changeVisualState(item)\r\n      );\r\n    }\r\n  };\r\n\r\n  repeat = () => {\r\n    this.clearTimeouts();\r\n    this.setState((prevState) => ({\r\n      array: [...prevState.originalArray],\r\n      traceStep: -1,\r\n      comparing: [],\r\n      compared: [],\r\n      sorted: []\r\n    }));\r\n    this.run(this.state.trace);\r\n  };\r\n\r\n  adjustPlaybackSpeed = (speed) => {\r\n    const playing = this.state.timeoutIds.length > 0;\r\n    this.pause();\r\n    const playbackSpeed = Number(speed.split('x')[0]);\r\n    this.setState({ playbackSpeed }, () => {\r\n      if (playing) this.continue();\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"SortVisualizer\">\r\n        <SortChart\r\n          numbers={this.state.array}\r\n          maxNum={Math.max(...this.state.array)}\r\n          groupA={this.state.groupA}\r\n          groupB={this.state.groupB}\r\n          groupC={this.state.groupC}\r\n          groupD={this.state.groupD}\r\n          sortedIndices={this.state.sortedIndices}\r\n        />\r\n\r\n        <div className=\"SortVisualizer__ProgressBar\">\r\n          <ProgressBar\r\n            width={\r\n              this.state.trace.length > 0\r\n                ? (this.state.traceStep /\r\n                    (this.state.trace.length - 1)) *\r\n                  100\r\n                : 0\r\n            }\r\n          />\r\n        </div>\r\n\r\n        <VisualizerControls\r\n          onPlay={\r\n            this.state.traceStep === -1\r\n              ? this.run.bind(this, this.state.trace)\r\n              : this.continue.bind(this)\r\n          }\r\n          onPause={this.pause.bind(this)}\r\n          onForward={this.stepForward.bind(this)}\r\n          onBackward={this.stepBackward.bind(this)}\r\n          onRepeat={this.repeat.bind(this)}\r\n          onAdjustSpeed={this.adjustPlaybackSpeed}\r\n          playing={this.state.timeoutIds.length > 0}\r\n          playDisabled={\r\n            (this.state.traceStep >= this.state.trace.length - 1 &&\r\n              this.state.traceStep !== -1) ||\r\n            this.state.trace.length <= 0\r\n          }\r\n          forwardDisabled={\r\n            this.state.traceStep >= this.state.trace.length - 1\r\n          }\r\n          backwardDisabled={this.state.traceStep <= 0}\r\n          repeatDisabled={this.state.traceStep <= 0}\r\n          playbackSpeed={this.state.playbackSpeed}\r\n        />\r\n\r\n        <ColorKey {...this.props.colorKey} />\r\n\r\n        <SortInfo {...this.props.desc} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SortVisualizer;\r\n","import React from 'react';\r\nimport './style.css';\r\n\r\nconst Footer = (props) => {\r\n  return (\r\n    <footer className=\"Footer\">\r\n      <section>\r\n        Designed and Developed by {' '}\r\n        <a\r\n          href=\"https://github.com/sammed-sankonatti\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          className=\"Footer__Link\"\r\n        >\r\n          Sammed.sankonatti\r\n        </a>\r\n      </section>\r\n\r\n      <section className=\"Footer__Items\">\r\n        <a\r\n          href=\"https://github.com/sammed-sankonatti/sorting-visualizer\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          className=\"Footer__Link\"\r\n        >\r\n          Code\r\n        </a>\r\n      </section>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","export const newTrace = (array) => {\r\n  return [\r\n    {\r\n      array: [...array],\r\n      groupA: [],\r\n      groupB: [],\r\n      groupC: [],\r\n      groupD: [],\r\n      sortedIndices: []\r\n    }\r\n  ];\r\n};\r\n\r\nexport const addToTrace = (\r\n  trace,\r\n  array,\r\n  sortedIndices = [],\r\n  groupA = [],\r\n  groupB = [],\r\n  groupC = [],\r\n  groupD = []\r\n) => {\r\n  trace.push({\r\n    array: [...array],\r\n    groupA: [...groupA],\r\n    groupB: [...groupB],\r\n    groupC: [...groupC],\r\n    groupD: [...groupD],\r\n    sortedIndices: [...sortedIndices]\r\n  });\r\n};\r\n\r\nexport const lastSorted = (trace) => {\r\n  return trace[trace.length - 1].sortedIndices;\r\n};\r\n\r\nexport const swap = (array, i, j) => {\r\n  const tmp = array[i];\r\n  array[i] = array[j];\r\n  array[j] = tmp;\r\n};\r\n\r\nexport const createRange = (start, end) => {\r\n  return [...Array(end - start).keys()].map((elem) => elem + start);\r\n};\r\n\r\nexport const createKey = (groupA, groupB, groupC, groupD) => {\r\n  return { groupA, groupB, groupC, groupD };\r\n};\r\n","import React from 'react';\r\nimport {\r\n  swap,\r\n  newTrace,\r\n  addToTrace,\r\n  lastSorted,\r\n  createKey\r\n} from './helpers';\r\n\r\nconst BubbleSort = (nums) => {\r\n  // Set up code for tracing the algorithm\r\n  const trace = newTrace(nums);\r\n\r\n  // Sorting Algorithm with trace capture\r\n  for (let i = 0; i < nums.length; i++) {\r\n    for (let j = 0; j < nums.length - i - 1; j++) {\r\n      // Visualize: Comparing A[j] and A[j + 1]\r\n      addToTrace(trace, nums, lastSorted(trace), [j, j + 1]);\r\n      if (nums[j] > nums[j + 1]) {\r\n        swap(nums, j, j + 1);\r\n        // Visualize: Swap A[j] and A[j + 1]\r\n        addToTrace(trace, nums, lastSorted(trace), [], [j, j + 1]);\r\n      }\r\n    }\r\n\r\n    // Visualize: final value is sorted\r\n    addToTrace(trace, nums, [\r\n      ...lastSorted(trace),\r\n      nums.length - 1 - i\r\n    ]);\r\n  }\r\n\r\n  return trace;\r\n};\r\n\r\nexport const BubbleSortKey = createKey('Comparing', 'Swapping');\r\nexport const BubbleSortDesc = {\r\n  title: 'Bubble Sort',\r\n  description: (\r\n    <p>\r\n      <a\r\n        href=\"https://en.wikipedia.org/wiki/Bubble_sort\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        Bubble Sort\r\n      </a>{' '}\r\n      is a simple sorting algorithm that repeatedly steps through the\r\n      list, compares adjacent elements and swaps them if they are in the\r\n      wrong order.The pass through the list is repeated until the list\r\n      is sorted. The algorithm, which is a comparison sort, is named for\r\n      the way smaller or larger elements \"bubble\" to the top of the\r\n      list. Although the algorithm is simple, it is too slow and\r\n      impractical for most problems\r\n    </p>\r\n  ),\r\n  worstCase: (\r\n    <span>\r\n      O(n<sup>2</sup>)\r\n    </span>\r\n  ),\r\n  avgCase: (\r\n    <span>\r\n      O(n<sup>2</sup>)\r\n    </span>\r\n  ),\r\n  bestCase: <span>O(n)</span>,\r\n  space: <span>O(1)</span>\r\n};\r\nexport default BubbleSort;\r\n","import React from 'react';\r\nimport {\r\n  swap,\r\n  newTrace,\r\n  addToTrace,\r\n  lastSorted,\r\n  createKey\r\n} from './helpers';\r\n\r\nconst SelectionSort = (nums) => {\r\n  // Initial State\r\n  const trace = newTrace(nums);\r\n\r\n  // Core Algorithm\r\n  for (let i = 0; i < nums.length - 1; i++) {\r\n    // Internal Loop: Find index of min value\r\n    let minIndex = i;\r\n    for (let j = i + 1; j < nums.length; j++) {\r\n      // Visualize: comparing A[j] to A[minIndex]\r\n      addToTrace(trace, nums, lastSorted(trace), [minIndex, j]);\r\n      if (nums[j] < nums[minIndex]) {\r\n        // Visualize: discovered new minIndex\r\n        addToTrace(trace, nums, lastSorted(trace), [minIndex], [j]);\r\n        minIndex = j;\r\n        // Visualize: reassign new minIndex;\r\n        addToTrace(trace, nums, lastSorted(trace), [minIndex], [j]);\r\n      }\r\n    }\r\n\r\n    // Visualize: i'th value to be swapped with min value\r\n    addToTrace(trace, nums, lastSorted(trace), [], [i, minIndex]);\r\n\r\n    swap(nums, i, minIndex);\r\n\r\n    // Visualize: i'th value has been swapped with min value\r\n    addToTrace(trace, nums, [...lastSorted(trace), i], [], []);\r\n  }\r\n\r\n  // Visualize: Final item in the array is sorted\r\n  addToTrace(trace, nums, [...lastSorted(trace), nums.length - 1]);\r\n\r\n  return trace;\r\n};\r\n\r\nexport const SelectionSortKey = createKey('Comparing', 'Swapping');\r\n\r\nexport const SelectionSortDesc = {\r\n  title: 'Selection Sort',\r\n  description: (\r\n    <p>\r\n      <a\r\n        href=\"https://en.wikipedia.org/wiki/Selection_sort\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        Selection Sort\r\n      </a>{' '}\r\n      is an in-place comparison sorting algorithm that divides the input\r\n      list into two parts: the sublist of items already sorted, which is\r\n      built up from left to right at the front (left) of the list, and\r\n      the sublist of items remaining to be sorted that occupy the rest\r\n      of the list. Initially, the sorted sublist is empty and the\r\n      unsorted sublist is the entire input list. The algorithm proceeds\r\n      by finding the smallest element in the unsorted sublist,\r\n      exchanging (swapping) it with the leftmost unsorted element\r\n      (putting it in sorted order), and moving the sublist boundaries\r\n      one element to the right.\r\n    </p>\r\n  ),\r\n  worstCase: (\r\n    <span>\r\n      O(n<sup>2</sup>)\r\n    </span>\r\n  ),\r\n  avgCase: (\r\n    <span>\r\n      O(n<sup>2</sup>)\r\n    </span>\r\n  ),\r\n  bestCase: (\r\n    <span>\r\n      O(n<sup>2</sup>)\r\n    </span>\r\n  ),\r\n  space: <span>O(1)</span>\r\n};\r\n\r\nexport default SelectionSort;\r\n","import React from 'react';\r\nimport { newTrace, addToTrace, createKey } from './helpers';\r\n\r\nconst InsertionSort = (nums) => {\r\n  // Initial State\r\n  const trace = newTrace(nums);\r\n\r\n  // Core Algorithm\r\n  for (let i = 1; i < nums.length; i++) {\r\n    let value = nums[i];\r\n    let hole = i;\r\n    // Visualize: Hole has been selected for comparison\r\n    addToTrace(trace, nums, [], [i]);\r\n    while (hole > 0 && nums[hole - 1] > value) {\r\n      // Visualize: Compare hole to value\r\n      addToTrace(trace, nums, [], [hole], [hole - 1]);\r\n      nums[hole] = nums[hole - 1];\r\n      hole -= 1;\r\n      // Visualize: Overwrite hole with hole - 1\r\n      addToTrace(trace, nums, [], [], [hole, hole + 1]);\r\n    }\r\n    // Visualize: Overwrite hole with value\r\n    addToTrace(trace, nums, [], [], [], [hole]);\r\n    nums[hole] = value;\r\n    // Visualize: value is in sorted position\r\n    addToTrace(trace, nums, [], [], [], [hole]);\r\n  }\r\n\r\n  // Visualize: Mark all elements as sorted\r\n  addToTrace(trace, nums, [...Array(nums.length).keys()]);\r\n  return trace;\r\n};\r\n\r\nexport const InsertionSortKey = createKey(\r\n  'Comparing',\r\n  'Swapping',\r\n  'Overwrite from memory'\r\n);\r\nexport const InsertionSortDesc = {\r\n  title: 'Insertion Sort',\r\n  description: (\r\n    <p>\r\n      <a\r\n        href=\"https://en.wikipedia.org/wiki/Insertion_sort\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        Insertion Sort\r\n      </a>{' '}\r\n      is a simple sorting algorithm that iterates through an array and\r\n      at each iteration it removes one element from the array, finds the\r\n      location it belongs to in the sorted list and inserts it there,\r\n      repeating until no elements remain in the unsorted list. It is an\r\n      in-place, stable sorting algorithm that is inefficient on large\r\n      input arrays but works well for data sets that are almost sorted.\r\n      It is more efficient in practice compared to other quadratic\r\n      sorting algorithms like bubble sort and selection sort.\r\n    </p>\r\n  ),\r\n  worstCase: (\r\n    <span>\r\n      O(n<sup>2</sup>)\r\n    </span>\r\n  ),\r\n  avgCase: (\r\n    <span>\r\n      O(n<sup>2</sup>)\r\n    </span>\r\n  ),\r\n  bestCase: <span>O(n)</span>,\r\n  space: <span>O(1)</span>\r\n};\r\n\r\nexport default InsertionSort;\r\n","import React from 'react';\r\nimport { newTrace, addToTrace, createKey } from './helpers';\r\n\r\nconst MergeSort = (nums) => {\r\n  // Initial State\r\n  const trace = newTrace(nums);\r\n\r\n  function merge(original, start, mid, end) {\r\n    const left = original.slice(start, mid);\r\n    const right = original.slice(mid, end);\r\n    let i = 0;\r\n    let j = 0;\r\n    let k = 0;\r\n    while (i < left.length && j < right.length) {\r\n      if (left[i] <= right[j]) {\r\n        addToTrace(trace, original, [], [], [], [k + start]);\r\n        original[k + start] = left[i];\r\n        i++;\r\n        addToTrace(trace, original, [], [], [], [k + start]);\r\n      } else {\r\n        addToTrace(trace, original, [], [], [], [k + start]);\r\n        original[k + start] = right[j];\r\n        j++;\r\n        addToTrace(trace, original, [], [], [], [k + start]);\r\n      }\r\n      k++;\r\n    }\r\n    while (i < left.length) {\r\n      addToTrace(trace, original, [], [], [], [k + start]);\r\n      original[k + start] = left[i];\r\n      i++;\r\n      k++;\r\n      addToTrace(trace, original, [], [], [], [k + start]);\r\n    }\r\n    while (j < right.length) {\r\n      addToTrace(trace, original, [], [], [], [k + start]);\r\n      original[k + start] = right[j];\r\n      j++;\r\n      k++;\r\n      addToTrace(trace, original, [], [], [], [k + start]);\r\n    }\r\n\r\n    left.length = 0;\r\n    right.length = 0;\r\n  }\r\n\r\n  function recursiveMergeSort(original, start, end) {\r\n    const length = end - start;\r\n    if (length < 2) {\r\n      // original = []\r\n      if (length < 1) return original;\r\n      // original = [x]\r\n      else return [original[start]];\r\n    }\r\n\r\n    const midPoint = Math.floor((start + end) / 2);\r\n\r\n    // Visualize: First Half\r\n    addToTrace(\r\n      trace,\r\n      original,\r\n      [],\r\n      [...Array(midPoint - start).keys()].map((i) => i + start)\r\n    );\r\n    recursiveMergeSort(original, start, midPoint);\r\n\r\n    // Visualize: Second Half\r\n    addToTrace(\r\n      trace,\r\n      original,\r\n      [],\r\n      [...Array(end - midPoint).keys()].map((i) => i + midPoint)\r\n    );\r\n    recursiveMergeSort(original, midPoint, end);\r\n\r\n    merge(original, start, midPoint, end);\r\n  }\r\n\r\n  recursiveMergeSort(nums, 0, nums.length);\r\n\r\n  // Visualize: Mark all elements as sorted\r\n  addToTrace(trace, nums, [...Array(nums.length).keys()]);\r\n  return trace;\r\n};\r\n\r\nexport const MergeSortKey = createKey(\r\n  'Call Merge Sort',\r\n  null,\r\n  'Overwrite from axillary array'\r\n);\r\nexport const MergeSortDesc = {\r\n  title: 'Merge Sort',\r\n  description: (\r\n    <div>\r\n      <p>\r\n        <a\r\n          href=\"https://en.wikipedia.org/wiki/Merge_sort\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Merge Sort\r\n        </a>{' '}\r\n        is an efficient, stable sorting algorith that makes use of the\r\n        divide and conquer strategy. Conceptually the algorithm works as\r\n        follows:\r\n      </p>\r\n      <ol>\r\n        <li>\r\n          Divide the unsorted list into <em>n</em> sublists, each\r\n          containing one element(a list of one element is considered\r\n          sorted)\r\n        </li>\r\n        <li>\r\n          Repeatedly merge sublists to produce new sorted sublists until\r\n          there is only one sublist remaining. This will be the sorted\r\n          list.\r\n        </li>\r\n      </ol>\r\n    </div>\r\n  ),\r\n  worstCase: (\r\n    <span>\r\n      O(<em>n</em> log <em>n</em>)\r\n    </span>\r\n  ),\r\n  avgCase: (\r\n    <span>\r\n      O(<em>n</em> log <em>n</em>)\r\n    </span>\r\n  ),\r\n  bestCase: (\r\n    <span>\r\n      O(<em>n</em> log <em>n</em>)\r\n    </span>\r\n  ),\r\n  space: (\r\n    <span>\r\n      O(<em>n</em>)\r\n    </span>\r\n  )\r\n};\r\nexport default MergeSort;\r\n","import React from 'react';\r\nimport {\r\n  swap,\r\n  newTrace,\r\n  addToTrace,\r\n  lastSorted,\r\n  createRange,\r\n  createKey\r\n} from './helpers';\r\n\r\nconst QuickSort = (nums) => {\r\n  // Initial State\r\n  const trace = newTrace(nums);\r\n\r\n  function choosePivot(array, start, end) {\r\n    // randomly pick an element between start and end;\r\n    return Math.floor(Math.random() * (end - start)) + start;\r\n  }\r\n\r\n  function partition(array, start, end) {\r\n    let i = start + 1;\r\n    let j = start + 1;\r\n\r\n    // Visualize: Keep pivot marked\r\n    addToTrace(trace, array, lastSorted(trace), [start]);\r\n\r\n    while (j <= end) {\r\n      if (array[j] < array[start]) {\r\n        // Visualize: Mark item that is less than pivot\r\n        addToTrace(\r\n          trace,\r\n          array,\r\n          lastSorted(trace),\r\n          [start],\r\n          [j],\r\n          [],\r\n          createRange(start + 1, i)\r\n        );\r\n\r\n        swap(array, i, j);\r\n\r\n        // Visualize: Move item to lesser list\r\n        addToTrace(\r\n          trace,\r\n          array,\r\n          lastSorted(trace),\r\n          [start],\r\n          [i],\r\n          [],\r\n          createRange(start + 1, i)\r\n        );\r\n        i += 1;\r\n      }\r\n      j += 1;\r\n    }\r\n\r\n    // Visualize: Mark center position\r\n    addToTrace(\r\n      trace,\r\n      array,\r\n      lastSorted(trace),\r\n      [i - 1],\r\n      [],\r\n      [],\r\n      createRange(start, i - 1)\r\n    );\r\n    swap(array, start, i - 1);\r\n\r\n    // Visualize: Move pivot to center\r\n    addToTrace(\r\n      trace,\r\n      array,\r\n      lastSorted(trace),\r\n      [i - 1],\r\n      [],\r\n      [],\r\n      createRange(start, i - 1)\r\n    );\r\n    return i - 1;\r\n  }\r\n\r\n  function recursiveQuickSort(array, start, end) {\r\n    if (start >= end) {\r\n      if (start === end) {\r\n        // Visualize: Mark only item as sorted\r\n        addToTrace(trace, array, [...lastSorted(trace), start]);\r\n      }\r\n      return null;\r\n    }\r\n\r\n    let pivot = choosePivot(array, start, end);\r\n\r\n    // Visualize: Mark chosen pivot\r\n    addToTrace(trace, array, lastSorted(trace), [pivot]);\r\n\r\n    swap(array, start, pivot);\r\n\r\n    // Visualize: Move chosen pivot to start\r\n    addToTrace(trace, array, lastSorted(trace), [pivot]);\r\n\r\n    pivot = partition(array, start, end);\r\n\r\n    // Visualize: Mark pivot after partition as sorted\r\n    addToTrace(trace, array, [...lastSorted(trace), pivot]);\r\n\r\n    recursiveQuickSort(array, start, pivot - 1);\r\n    recursiveQuickSort(array, pivot + 1, end);\r\n  }\r\n\r\n  recursiveQuickSort(nums, 0, nums.length - 1);\r\n\r\n  return trace;\r\n};\r\n\r\nexport const QuickSortKey = createKey(\r\n  'Comparing',\r\n  'Swapping',\r\n  null,\r\n  'Less than pivot'\r\n);\r\n\r\nexport const QuickSortDesc = {\r\n  title: 'Quick Sort',\r\n  description: (\r\n    <div>\r\n      <p>\r\n        <a\r\n          href=\"https://en.wikipedia.org/wiki/Quicksort\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Quick Sort\r\n        </a>{' '}\r\n        is an efficient, in-place sorting algorith that in practice is\r\n        faster than MergeSort and HeapSort. However, it is not a stable\r\n        sorting algorithm, meaning that the relative positioning of\r\n        equal sort items is not preserved.Quicksort is a divide and\r\n        conquer algorithm. Quicksort first divides a large array into\r\n        two smaller sub-arrays: the low elements and the high elements.\r\n        Quicksort can then recursively sort the sub-arrays. The steps\r\n        are:\r\n      </p>\r\n      <ol>\r\n        <li>\r\n          Pick an element, called a pivot, from the array. This is\r\n          usually done at random.\r\n        </li>\r\n        <li>Move pivot element to the start of the array.</li>\r\n        <li>\r\n          <em>Partitioning:</em> reorder the array so that all elements\r\n          with values less than the pivot come before the pivot, while\r\n          all elements with values greater than the pivot come after it\r\n          (equal values can go either way). After this partitioning, the\r\n          pivot is in its final position. This is called the{' '}\r\n          <em>partition</em> operation.\r\n        </li>\r\n        <li>\r\n          Recursively apply the above steps to the sub-array of elements\r\n          with smaller values and separately to the sub-array of\r\n          elements with greater values.\r\n        </li>\r\n      </ol>\r\n      <p>\r\n        The base case of the recursion is an array of size zero or one,\r\n        which are sorted by definition.\r\n      </p>\r\n    </div>\r\n  ),\r\n  worstCase: (\r\n    <span>\r\n      O(<em>n</em>\r\n      <sup>2</sup>)\r\n    </span>\r\n  ),\r\n  avgCase: (\r\n    <span>\r\n      O(<em>n</em>log<em>n</em>)\r\n    </span>\r\n  ),\r\n  bestCase: (\r\n    <span>\r\n      O(<em>n</em>log<em>n</em>)\r\n    </span>\r\n  ),\r\n  space: (\r\n    <span>\r\n      O(log<em>n</em>)\r\n    </span>\r\n  )\r\n};\r\n\r\nexport default QuickSort;\r\n","import React from 'react';\r\nimport {\r\n  swap,\r\n  newTrace,\r\n  addToTrace,\r\n  lastSorted,\r\n  createRange,\r\n  createKey\r\n} from './helpers';\r\n\r\nconst QuickSort3 = (nums) => {\r\n  // Initial State\r\n  const trace = newTrace(nums);\r\n\r\n  function choosePivot(array, start, end) {\r\n    // randomly pick an element between start and end;\r\n    return Math.floor(Math.random() * (end - start)) + start;\r\n  }\r\n\r\n  function partition(array, start, end) {\r\n    const pivot = array[start];\r\n    let i = start + 1;\r\n    let j = start + 1;\r\n    let k = start + 1;\r\n    // Between k and end : uncheked\r\n    // Between start and i : equal to pivot\r\n    // Between i and j : less than pivot\r\n    // Between j and k : greater than pivot\r\n\r\n    // Visualize: Keep pivot marked\r\n    addToTrace(trace, array, lastSorted(trace), [start]);\r\n\r\n    while (k < end) {\r\n      if (array[k] === pivot) {\r\n        // Visualize: Mark item that is equal to pivot\r\n        addToTrace(\r\n          trace,\r\n          array,\r\n          lastSorted(trace),\r\n          [start, ...createRange(start, i)],\r\n          [k],\r\n          [],\r\n          createRange(i, j)\r\n        );\r\n\r\n        swap(array, i, k);\r\n\r\n        // Visualize: Mark item that is equal to pivot\r\n        addToTrace(\r\n          trace,\r\n          array,\r\n          lastSorted(trace),\r\n          [start, ...createRange(start, i)],\r\n          [i],\r\n          [],\r\n          createRange(i, j)\r\n        );\r\n\r\n        if (j > i) swap(array, j, k);\r\n        i += 1;\r\n        j += 1;\r\n      } else if (array[k] < pivot) {\r\n        // Visualize: Mark item that is less than pivot\r\n        addToTrace(\r\n          trace,\r\n          array,\r\n          lastSorted(trace),\r\n          [start, ...createRange(start, i)],\r\n          [k],\r\n          [],\r\n          createRange(i, j)\r\n        );\r\n\r\n        swap(array, j, k);\r\n\r\n        // Visualize: Move item to lesser list\r\n        addToTrace(\r\n          trace,\r\n          array,\r\n          lastSorted(trace),\r\n          [start, ...createRange(start, i)],\r\n          [j],\r\n          [],\r\n          createRange(i, j)\r\n        );\r\n\r\n        j += 1;\r\n      }\r\n      k += 1;\r\n    }\r\n\r\n    const pivot_elements = i - start;\r\n    i -= 1;\r\n    j -= 1;\r\n    while (i >= start) {\r\n      swap(array, i, j);\r\n      i -= 1;\r\n      j -= 1;\r\n    }\r\n\r\n    // Visualize: Move pivot_elements to center\r\n    addToTrace(\r\n      trace,\r\n      array,\r\n      lastSorted(trace),\r\n      createRange(j + 1, j + 1 + pivot_elements),\r\n      [],\r\n      [],\r\n      createRange(start, j + 1)\r\n    );\r\n    return [j + 1, j + 1 + pivot_elements];\r\n  }\r\n\r\n  function recursiveQuickSort3(array, start, end) {\r\n    if (start >= end - 1) {\r\n      if (start === end - 1) {\r\n        // Visualize: Mark only item as sorted\r\n        addToTrace(trace, array, [...lastSorted(trace), start]);\r\n      }\r\n      return null;\r\n    }\r\n\r\n    let pivot = choosePivot(array, start, end);\r\n\r\n    // Visualize: Mark chosen pivot\r\n    addToTrace(trace, array, lastSorted(trace), [pivot]);\r\n\r\n    swap(array, start, pivot);\r\n\r\n    // Visualize: Move chosen pivot to start\r\n    addToTrace(trace, array, lastSorted(trace), [pivot]);\r\n\r\n    let [pivotStart, pivotEnd] = partition(array, start, end);\r\n\r\n    // Visualize: Mark pivot after partition as sorted\r\n    addToTrace(trace, array, [\r\n      ...lastSorted(trace),\r\n      ...createRange(pivotStart, pivotEnd)\r\n    ]);\r\n\r\n    recursiveQuickSort3(array, start, pivotStart);\r\n    recursiveQuickSort3(array, pivotEnd, end);\r\n  }\r\n\r\n  recursiveQuickSort3(nums, 0, nums.length);\r\n\r\n  return trace;\r\n};\r\n\r\nexport const QuickSort3Key = createKey(\r\n  'Comparing',\r\n  'Swapping',\r\n  null,\r\n  'Less than pivot'\r\n);\r\n\r\nexport const QuickSort3Desc = {\r\n  title: 'Quick Sort 3-Way Partitioning',\r\n  description: (\r\n    <div>\r\n      <p>\r\n        <a\r\n          href=\"https://en.wikipedia.org/wiki/Quicksort#Repeated_elements\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Quick Sort\r\n        </a>{' '}\r\n        exhibits poor performance on arrays that contain many repeated\r\n        elements. This issue (\r\n        <a\r\n          href=\"https://en.wikipedia.org/wiki/Dutch_national_flag_problem\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Dutch national flag problem\r\n        </a>\r\n        ) can be solved by using an alternative linear-time partitioning\r\n        routine that separates the values into three groups: values less\r\n        than the pivot, values equal to the pivot, and values greater\r\n        than the pivot. The values equal to the pivot are already\r\n        sorted, so only the less-than and greater-than partitions need\r\n        to be recursively sorted.\r\n      </p>\r\n    </div>\r\n  ),\r\n  worstCase: (\r\n    <span>\r\n      O(<em>n</em>\r\n      <sup>2</sup>)\r\n    </span>\r\n  ),\r\n  avgCase: (\r\n    <span>\r\n      O(<em>n</em> log <em>n</em>)\r\n    </span>\r\n  ),\r\n  bestCase: (\r\n    <span>\r\n      O(<em>n</em>)\r\n    </span>\r\n  ),\r\n  space: (\r\n    <span>\r\n      O(log <em>n</em>)\r\n    </span>\r\n  )\r\n};\r\n\r\nexport default QuickSort3;\r\n","import React from 'react';\r\nimport {\r\n  swap,\r\n  newTrace,\r\n  addToTrace,\r\n  lastSorted,\r\n  createRange,\r\n  createKey\r\n} from './helpers';\r\n\r\nconst HeapSort = (nums) => {\r\n  const trace = newTrace(nums);\r\n\r\n  // Helper functions to quickly access nodes\r\n  const left = (i) => 2 * i + 1;\r\n  const right = (i) => 2 * i + 2;\r\n  const parent = (i) => Math.floor((i - 1) / 2);\r\n\r\n  const maxHeapify = (array, i, heapsize) => {\r\n    const leftChild = left(i);\r\n    const rightChild = right(i);\r\n\r\n    // Visualize: Compare parent and leftChild\r\n    addToTrace(trace, array, lastSorted(trace), [i, leftChild]);\r\n\r\n    let largest =\r\n      leftChild < heapsize && array[leftChild] > array[i]\r\n        ? leftChild\r\n        : i;\r\n\r\n    // Visualize: Compare largest and rightChild\r\n    addToTrace(trace, array, lastSorted(trace), [largest, rightChild]);\r\n\r\n    if (rightChild < heapsize && array[rightChild] > array[largest])\r\n      largest = rightChild;\r\n\r\n    if (largest !== i) {\r\n      // Visualize: Select largest child and parent\r\n      addToTrace(trace, array, lastSorted(trace), [], [i, largest]);\r\n\r\n      swap(array, i, largest);\r\n\r\n      // Visualize: Swap largest child and parent\r\n      addToTrace(trace, array, lastSorted(trace), [], [i, largest]);\r\n\r\n      maxHeapify(array, largest, heapsize);\r\n    }\r\n  };\r\n\r\n  const BuildMaxHeap = (array) => {\r\n    const start = Math.floor(array.length / 2);\r\n    const heapsize = array.length;\r\n    for (let i = start; i >= 0; i--) {\r\n      maxHeapify(array, i, heapsize);\r\n    }\r\n\r\n    // Visualize: Mark heap as built\r\n    addToTrace(\r\n      trace,\r\n      array,\r\n      lastSorted(trace),\r\n      [],\r\n      [],\r\n      [],\r\n      createRange(0, array.length)\r\n    );\r\n  };\r\n\r\n  const heapSort = (array) => {\r\n    BuildMaxHeap(array);\r\n    let heapsize = array.length;\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      // Visualize: Select Maximum\r\n      addToTrace(trace, array, lastSorted(trace), [], [0, i]);\r\n\r\n      swap(array, 0, i);\r\n      heapsize -= 1;\r\n\r\n      // Visualize: Swap with last element in heap\r\n      addToTrace(trace, array, [...lastSorted(trace), i], [], [0, i]);\r\n\r\n      maxHeapify(array, 0, heapsize);\r\n\r\n      // Visualize: Heap created\r\n      addToTrace(\r\n        trace,\r\n        array,\r\n        lastSorted(trace),\r\n        [],\r\n        [],\r\n        [],\r\n        createRange(0, heapsize)\r\n      );\r\n    }\r\n    addToTrace(trace, array, [...lastSorted(trace), 0]);\r\n  };\r\n\r\n  // Execute Heapsort\r\n  heapSort(nums);\r\n  return trace;\r\n};\r\n\r\nexport const HeapSortKey = createKey(\r\n  'Comparing',\r\n  'Swapping',\r\n  null,\r\n  'Heap Built'\r\n);\r\n\r\nexport const HeapSortDesc = {\r\n  title: 'Heap Sort',\r\n  description: (\r\n    <div>\r\n      <p>\r\n        <a\r\n          href=\"https://en.wikipedia.org/wiki/Heapsort\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Heap Sort\r\n        </a>{' '}\r\n        can be thought of as an improved selection sort that uses the\r\n        heap data structure rather than a linear-time search to find the\r\n        maximum or minimum element. It is an in-place sorting algorithm\r\n        that is not stable and has a somewhat slower running time than\r\n        Quicksort in practice.\r\n      </p>\r\n      <p>\r\n        The heapsort algorithm can be divided into two parts. In the\r\n        first step, a heap is built out of the data. The heap is often\r\n        placed in an array with the layout of a complete binary tree. In\r\n        the second step, a sorted array is created by repeatedly\r\n        removing the largest element from the heap (the root of the\r\n        heap), and inserting it into the array. The heap is updated\r\n        after each removal to maintain the heap property. Once all\r\n        objects have been removed from the heap, the result is a sorted\r\n        array.\r\n      </p>\r\n      <ol>\r\n        <li>\r\n          Call the buildMaxHeap() function on the list. Also referred to\r\n          as heapify(), this builds a heap from a list in O(n)\r\n          operations.\r\n        </li>\r\n        <li>\r\n          Swap the first element of the list with the final element.\r\n          Decrease the considered range of the list by one.\r\n        </li>\r\n        <li>\r\n          Call the <em>siftDown()</em>, also called{' '}\r\n          <em>maxHeapify()</em> function on the list to sift the new\r\n          first element to its appropriate index in the heap.\r\n        </li>\r\n        <li>\r\n          Go to step (2) unless the considered range of the list is one\r\n          element.\r\n        </li>\r\n      </ol>\r\n    </div>\r\n  ),\r\n  worstCase: (\r\n    <span>\r\n      O(<em>n</em> log <em>n</em>)\r\n    </span>\r\n  ),\r\n  avgCase: (\r\n    <span>\r\n      O(<em>n</em> log <em>n</em>)\r\n    </span>\r\n  ),\r\n  bestCase: (\r\n    <span>\r\n      O(<em>n</em> log <em>n</em>)\r\n    </span>\r\n  ),\r\n  space: <span>O(1)</span>\r\n};\r\n\r\nexport default HeapSort;\r\n","import React from 'react';\r\nimport {\r\n  swap,\r\n  newTrace,\r\n  addToTrace,\r\n  createRange,\r\n  createKey\r\n} from './helpers';\r\n\r\nconst ShellSort = (nums) => {\r\n  const trace = newTrace(nums);\r\n\r\n  for (\r\n    let gap = Math.floor(nums.length / 2);\r\n    gap > 0;\r\n    gap = Math.floor(gap / 2)\r\n  ) {\r\n    for (let j = gap; j < nums.length; j++) {\r\n      for (let i = j - gap; i >= 0; i -= gap) {\r\n        addToTrace(trace, nums, [], [i, i + gap]);\r\n        if (nums[i + gap] < nums[i]) {\r\n          addToTrace(trace, nums, [], [], [i, i + gap]);\r\n          swap(nums, i, i + gap);\r\n          addToTrace(trace, nums, [], [], [i, i + gap]);\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  addToTrace(trace, nums, createRange(0, nums.length));\r\n  return trace;\r\n};\r\n\r\nexport const ShellSortKey = createKey('Comparing', 'Swapping');\r\n\r\nexport const ShellSortDesc = {\r\n  title: 'Shell Sort',\r\n  description: (\r\n    <div>\r\n      <p>\r\n        <a\r\n          href=\"https://en.wikipedia.org/wiki/Shellsort\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Shell Sort\r\n        </a>\r\n        , also know as Shell's method is a generalization of insertion\r\n        sort where elements <em>gap</em> distance apart are compared\r\n        rather than adjacent elements. The method starts by sorting\r\n        pairs of elements far apart from each other, then progressively\r\n        reducing the gap between elements to be compared. Starting with\r\n        far apart elements, it can move some out-of-place elements into\r\n        position faster than a simple nearest neighbor exchange. The\r\n        running time of Shellsort is heavily dependent on the gap\r\n        sequence it uses. For many practical variants, determining their\r\n        time complexity remains an open problem. It is in-place sorting\r\n        algorithm that is not stable.\r\n      </p>\r\n    </div>\r\n  ),\r\n  worstCase: (\r\n    <span>\r\n      O(<em>n</em>\r\n      <sup>2</sup>)\r\n    </span>\r\n  ),\r\n  avgCase: (\r\n    <span>\r\n      O(<em>n</em>\r\n      <sup>3/2</sup>)\r\n    </span>\r\n  ),\r\n  bestCase: (\r\n    <span>\r\n      O(<em>n</em> log <em>n</em>)\r\n    </span>\r\n  ),\r\n  space: <span>O(1)</span>\r\n};\r\n\r\nexport default ShellSort;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport './AppDark.css';\r\n\r\nimport AppControls from './components/molecules/AppControls';\r\nimport TopBar from './components/organisms/TopBar';\r\nimport AppDrawer from './components/organisms/AppDrawer';\r\nimport SortVisualizer from './components/organisms/SortVisualizer';\r\nimport Footer from './components/molecules/Footer';\r\n\r\nimport BubbleSort, {\r\n  BubbleSortKey,\r\n  BubbleSortDesc\r\n} from './algorithms/BubbleSort';\r\nimport SelectionSort, {\r\n  SelectionSortKey,\r\n  SelectionSortDesc\r\n} from './algorithms/SelectionSort';\r\nimport InsertionSort, {\r\n  InsertionSortKey,\r\n  InsertionSortDesc\r\n} from './algorithms/InsertionSort';\r\nimport MergeSort, {\r\n  MergeSortKey,\r\n  MergeSortDesc\r\n} from './algorithms/MergeSort';\r\nimport QuickSort, {\r\n  QuickSortKey,\r\n  QuickSortDesc\r\n} from './algorithms/QuickSort';\r\nimport QuickSort3, {\r\n  QuickSort3Key,\r\n  QuickSort3Desc\r\n} from './algorithms/QuickSort3';\r\nimport HeapSort, {\r\n  HeapSortKey,\r\n  HeapSortDesc\r\n} from './algorithms/HeapSort';\r\nimport ShellSort, {\r\n  ShellSortKey,\r\n  ShellSortDesc\r\n} from './algorithms/ShellSort';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    darkMode: false,\r\n    array: [],\r\n    arraySize: 10,\r\n    trace: [],\r\n    algorithm: null,\r\n    appDrawerOpen: false\r\n  };\r\n\r\n  ALGORITHM = {\r\n    'Bubble Sort': BubbleSort,\r\n    'Selection Sort': SelectionSort,\r\n    'Insertion Sort': InsertionSort,\r\n    'Merge Sort': MergeSort,\r\n    'Quick Sort': QuickSort,\r\n    'Quick Sort 3': QuickSort3,\r\n    'Heap Sort': HeapSort,\r\n    'Shell Sort': ShellSort\r\n  };\r\n\r\n  ALGORITHM_KEY = {\r\n    'Bubble Sort': BubbleSortKey,\r\n    'Selection Sort': SelectionSortKey,\r\n    'Insertion Sort': InsertionSortKey,\r\n    'Merge Sort': MergeSortKey,\r\n    'Quick Sort': QuickSortKey,\r\n    'Quick Sort 3': QuickSort3Key,\r\n    'Heap Sort': HeapSortKey,\r\n    'Shell Sort': ShellSortKey\r\n  };\r\n\r\n  ALGORITHM_DESC = {\r\n    'Bubble Sort': BubbleSortDesc,\r\n    'Selection Sort': SelectionSortDesc,\r\n    'Insertion Sort': InsertionSortDesc,\r\n    'Merge Sort': MergeSortDesc,\r\n    'Quick Sort': QuickSortDesc,\r\n    'Quick Sort 3': QuickSort3Desc,\r\n    'Heap Sort': HeapSortDesc,\r\n    'Shell Sort': ShellSortDesc\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.generateRandomArray();\r\n  }\r\n\r\n  generateRandomArray = () => {\r\n    // Generate pseudo-random number between 1 and max\r\n    function getRandomInt(max) {\r\n      return Math.floor(Math.random() * Math.floor(max)) + 1;\r\n    }\r\n\r\n    // Generate an array of length max\r\n    const array = Array(this.state.arraySize)\r\n      .fill(0)\r\n      .map(() => getRandomInt(this.state.arraySize * 5));\r\n\r\n    this.setState(\r\n      {\r\n        array,\r\n        trace: []\r\n      },\r\n      this.createTrace\r\n    );\r\n  };\r\n\r\n  handleAlgorithmChange = (algorithm) => {\r\n    this.setState({ algorithm }, this.generateRandomArray);\r\n  };\r\n\r\n  handleArraySizeChange = (size) => {\r\n    size = Number(size);\r\n    size = size > 100 ? 100 : size;\r\n    size = size < 0 ? 0 : size;\r\n    this.setState({ arraySize: size }, this.generateRandomArray);\r\n  };\r\n\r\n  createTrace = () => {\r\n    const numbers = [...this.state.array];\r\n    const sort = this.ALGORITHM[this.state.algorithm];\r\n    if (sort) {\r\n      const trace = sort(numbers);\r\n      this.setState({ trace });\r\n    }\r\n  };\r\n\r\n  toggleDarkMode = () => {\r\n    this.setState((prevState) => ({ darkMode: !prevState.darkMode }));\r\n  };\r\n\r\n  toggleAppDrawer = () => {\r\n    this.setState((prevState) => ({\r\n      appDrawerOpen: !prevState.appDrawerOpen\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    let theme = `App`;\r\n    if (this.state.darkMode) theme += ` App_dark`;\r\n    if (this.state.appDrawerOpen) theme += ` App_modal_open`;\r\n\r\n    const colorKey = this.ALGORITHM_KEY[this.state.algorithm];\r\n    const desc = this.ALGORITHM_DESC[this.state.algorithm];\r\n\r\n    const controls = (\r\n      <AppControls\r\n        onGenerateRandomArray={this.generateRandomArray}\r\n        algorithm={this.state.algorithm}\r\n        onAlgorithmChange={this.handleAlgorithmChange}\r\n        arraySize={this.state.arraySize}\r\n        onArraySizeChange={this.handleArraySizeChange}\r\n        onToggleDarkMode={this.toggleDarkMode}\r\n        darkMode={this.state.darkMode}\r\n      />\r\n    );\r\n\r\n    return (\r\n      <div className={theme}>\r\n        <TopBar\r\n          drawerOpen={this.state.appDrawerOpen}\r\n          toggleDrawer={this.toggleAppDrawer}\r\n        >\r\n          {controls}\r\n        </TopBar>\r\n\r\n        <AppDrawer\r\n          open={this.state.appDrawerOpen}\r\n          closeDrawer={this.toggleAppDrawer}\r\n        >\r\n          {controls}\r\n        </AppDrawer>\r\n\r\n        <main className=\"App__Body\">\r\n          <SortVisualizer\r\n            array={this.state.array}\r\n            trace={this.state.trace}\r\n            colorKey={colorKey}\r\n            desc={desc}\r\n          />\r\n        </main>\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}